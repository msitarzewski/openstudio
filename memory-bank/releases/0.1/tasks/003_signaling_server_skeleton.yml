id: "003"
title: "Create signaling server skeleton"
component: "backend"
estimated_hours: 3

context: |
  Build the basic Node.js signaling server with WebSocket support.
  This server will coordinate all WebRTC connections between peers.

  At this stage, we just need a functioning WebSocket server that accepts
  connections and responds to basic messages. Room management comes next.

depends_on: ["001"]

acceptance_criteria:
  - WebSocket server listens on port 3000
  - Accepts WebSocket connections from browsers
  - Responds to 'ping' messages with 'pong'
  - Health check endpoint at GET /health returns 200 OK
  - Server logs connections and disconnections
  - Graceful shutdown on SIGTERM/SIGINT

files_to_create:
  - server/server.js
  - server/lib/websocket-server.js
  - server/lib/logger.js

files_to_modify:
  - server/Dockerfile (update CMD to use server.js)

tests_required:
  - "Manual: Start server with 'npm start', verify it listens on 3000"
  - "Manual: Connect with wscat -c ws://localhost:3000"
  - "Manual: Send ping message, receive pong response"
  - "Manual: curl http://localhost:3000/health returns 200"

references:
  - memory-bank/systemPatterns.md (Signaling Server responsibilities)
  - memory-bank/techContext.md (WebSocket Library)
  - memory-bank/projectRules.md (Error Handling Patterns)

notes: |
  Use the 'ws' library (already installed in task 001).
  Keep it simple - no authentication yet, just basic connectivity.

  IMPLEMENTATION NOTE (Task 003):
  - Port 3000 chosen to match existing docker-compose.yml configuration
  - Entry point: server.js (matches package.json main field)
  - This decision documented to prevent future confusion with port 8080

  Example ping/pong message format:
  Client sends: {"type": "ping"}
  Server responds: {"type": "pong", "timestamp": 1234567890}
